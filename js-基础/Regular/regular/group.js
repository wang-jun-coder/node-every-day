// () 包裹子表达式

// ipv4 地址
// 0-255 . 0-255 . 0-255 . 0-255

// @see http://www.regexlib.com/REDetails.aspx?regexp_id=2685
// ^(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[0-9]{1,2})){3}$

// ipv4 地址分四段, 中间用 . 链接, 每段最大值为 255,
// 正则匹配单段, 分 4 种 case,
// case1: 三位数, 25 开头, 第三位跟 0-5 => 25[0-5]
// case2: 三位数, 2 开头, 第二位跟 0-4(5 分到 case1), 第三位可以跟 0-9 => 2[0-4]\d
// case3: 三位数, 1 开头, 第二位第三位, 都可以为 0-9   => 1\d{2}
// case4: 两位数, 第一位第二位都可以为 0-9  => \d{1,2}

// 单段匹配正则使用分支 25[0-5]|2[0-4]\d|1\d{2}|\d{1,2}
// 组合, 由于只有三个点, 所以正则分两段, . 可以分给前段也可分给后段, 这里分给后段, 后段使用分组后, 限定重复三次
// (25[0-5]|2[0-4]\d|1\d{2}|\d{1,2})|(\.(25[0-5]|2[0-4]\d|1\d{2}|\d{1,2})){3}
// 为了检测更精确, 再匹配字符串开头和结尾

const reg = /^(25[0-5]|2[0-4]\d|1\d{2}|\d{1,2})(\.(25[0-5]|2[0-4]\d|1\d{2}|\d{1,2})){3}$/;

console.log(reg.test('127.0.0.1'));
console.log(reg.test('192.168.34.6'));
console.log(reg.test('42.28.99.47'));
console.log(reg.test('42.28.99.7'));
console.log(reg.test('42.28.99.267'));      // false


// (?# 这是一串注释), nodejs 暂不支持
// const reg1 = /^(25[0-5](?#250-255)|2[0-4]\d(?#200-249)|1\d{2}(?#100-199)|\d{1,2}(?#0-99))(\.(25[0-5]|2[0-4]\d|1\d{2}|\d{1,2})){3}$/; //
// console.log(reg1.test('127.0.0.1'));
